// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AspCore_Conic_Erp_RestApi.Migrations
{
    [DbContext(typeof(ConicErpContext))]
    [Migration("20201207092413_AddRoleAdminToDeveloperAccount")]
    partial class AddRoleAdminToDeveloperAccount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "Arabic_CI_AI")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            Code = "",
                            Description = "",
                            IsPrime = false,
                            Name = "مبيعات",
                            Status = 0,
                            Type = "InCome"
                        });
                });

            modelBuilder.Entity("Entities.ActionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.Property<int?>("CashId")
                        .HasColumnType("int")
                        .HasColumnName("CashID");

                    b.Property<int?>("ChequeId")
                        .HasColumnType("int")
                        .HasColumnName("ChequeID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    b.Property<long?>("EntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntryID");

                    b.Property<int?>("InventoryItemId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryItemID");

                    b.Property<long?>("InventoryMovementId")
                        .HasColumnType("bigint")
                        .HasColumnName("InventoryMovementID");

                    b.Property<long?>("ItemsId")
                        .HasColumnType("bigint")
                        .HasColumnName("ItemsID");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("MemberID");

                    b.Property<int?>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("MembershipID");

                    b.Property<long?>("MembershipMovementId")
                        .HasColumnType("bigint")
                        .HasColumnName("MembershipMovementID");

                    b.Property<int?>("MembershipMovementOrderId")
                        .HasColumnType("int")
                        .HasColumnName("MembershipMovementOrderID");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int")
                        .HasColumnName("MenuID");

                    b.Property<int>("OprationId")
                        .HasColumnType("int")
                        .HasColumnName("OprationID");

                    b.Property<long?>("OrderInventoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrderInventoryID");

                    b.Property<int?>("OriginId")
                        .HasColumnType("int")
                        .HasColumnName("OriginID");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID");

                    b.Property<DateTime>("PostingDateTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("PurchaseInvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("PurchaseInvoiceID");

                    b.Property<long?>("SalesInvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("SalesInvoiceID");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<long?>("StockMovementId")
                        .HasColumnType("bigint")
                        .HasColumnName("StockMovementID");

                    b.Property<long?>("StocktakingInventoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("StocktakingInventoryID");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UserID");

                    b.Property<long?>("VendorId")
                        .HasColumnType("bigint")
                        .HasColumnName("VendorID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OprationId" }, "IX_ActionLog_OprationID");

                    b.ToTable("ActionLog");
                });

            modelBuilder.Entity("Entities.BackUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("BackUpPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DataBaseName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("BackUp");
                });

            modelBuilder.Entity("Entities.Bank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<long?>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountType")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true);

                    b.Property<string>("BranchName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Currency")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("Iban")
                        .HasColumnType("bigint")
                        .HasColumnName("IBAN");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "IX_Bank_AccountID");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Entities.Cash", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<double?>("Btcash")
                        .HasColumnType("float")
                        .HasColumnName("BTCash");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("Pcip")
                        .HasColumnType("float")
                        .HasColumnName("PCIP");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "IX_Cash_AccountID");

                    b.ToTable("Cash");
                });

            modelBuilder.Entity("Entities.Cheque", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("BankAddress")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("BankName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("ChequeAmount")
                        .HasColumnType("float");

                    b.Property<long?>("ChequeNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FakeDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<string>("Payee")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<long>("VendorId")
                        .HasColumnType("bigint")
                        .HasColumnName("VendorID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "VendorId" }, "IX_Cheque_VendorID");

                    b.ToTable("Cheque");
                });

            modelBuilder.Entity("Entities.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BusinessDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Fax")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("FooterReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NickName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber1")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("RateNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("Entities.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastSetDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<int?>("ValueOfDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Entities.EditorsUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EditorsUser");
                });

            modelBuilder.Entity("Entities.EntryAccounting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FakeDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EntryAccounting");
                });

            modelBuilder.Entity("Entities.EntryMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntryID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "IX_EntryMovement_AccountID");

                    b.HasIndex(new[] { "EntryId" }, "IX_EntryMovement_EntryID");

                    b.ToTable("EntryMovement");
                });

            modelBuilder.Entity("Entities.FileDatum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("Fktable")
                        .HasColumnType("bigint")
                        .HasColumnName("FKTable");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("FileData");
                });

            modelBuilder.Entity("Entities.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("Entities.InventoryMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryItemID");

                    b.Property<long>("ItemsId")
                        .HasColumnType("bigint")
                        .HasColumnName("ItemsID");

                    b.Property<long?>("OrderInventoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrderInventoryID");

                    b.Property<long?>("PurchaseInvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("PurchaseInvoiceID");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<long?>("SalesInvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("SalesInvoiceID");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.Property<string>("TypeMove")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InventoryItemId" }, "IX_InventoryMovement_InventoryItemID");

                    b.HasIndex(new[] { "ItemsId" }, "IX_InventoryMovement_ItemsID");

                    b.HasIndex(new[] { "OrderInventoryId" }, "IX_InventoryMovement_OrderInventoryID");

                    b.HasIndex(new[] { "PurchaseInvoiceId" }, "IX_InventoryMovement_PurchaseInvoiceID");

                    b.HasIndex(new[] { "SalesInvoiceId" }, "IX_InventoryMovement_SalesInvoiceID");

                    b.ToTable("InventoryMovement");
                });

            modelBuilder.Entity("Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Barcode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("CostPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<double?>("LowOrder")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("OtherPrice")
                        .HasColumnType("float");

                    b.Property<double?>("Rate")
                        .HasColumnType("float");

                    b.Property<double?>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Entities.ItemMuo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("ItemsId")
                        .HasColumnType("bigint")
                        .HasColumnName("ItemsID");

                    b.Property<int?>("MenuItemId")
                        .HasColumnType("int")
                        .HasColumnName("MenuItemID");

                    b.Property<int?>("OriginItemId")
                        .HasColumnType("int")
                        .HasColumnName("OriginItemID");

                    b.Property<int?>("UnitItemId")
                        .HasColumnType("int")
                        .HasColumnName("UnitItemID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemsId" }, "IX_ItemMUO_ItemsID");

                    b.HasIndex(new[] { "MenuItemId" }, "IX_ItemMUO_MenuItemID");

                    b.HasIndex(new[] { "OriginItemId" }, "IX_ItemMUO_OriginItemID");

                    b.HasIndex(new[] { "UnitItemId" }, "IX_ItemMUO_UnitItemID");

                    b.ToTable("ItemMUO");
                });

            modelBuilder.Entity("Entities.Massage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Fktable")
                        .HasColumnType("bigint")
                        .HasColumnName("FKTable");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Massage");
                });

            modelBuilder.Entity("Entities.Member", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PhoneNumber1")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SSN");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "IX_Member_AccountID");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Entities.MemberFace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("FaceLength")
                        .HasColumnType("int");

                    b.Property<string>("FaceStr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("MemberID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberFace_MemberID");

                    b.ToTable("MemberFace");
                });

            modelBuilder.Entity("Entities.MemberLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("DeviceID");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("MemberID");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "IX_MemberLog_DeviceID");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberLog_MemberID");

                    b.ToTable("MemberLog");
                });

            modelBuilder.Entity("Entities.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<double>("FullDayPrice")
                        .HasColumnType("float");

                    b.Property<int?>("MaxFreezeLimitDays")
                        .HasColumnType("int");

                    b.Property<int?>("MinFreezeLimitDays")
                        .HasColumnType("int");

                    b.Property<double>("MorningPrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumberDays")
                        .HasColumnType("int");

                    b.Property<double?>("Rate")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("Entities.MembershipMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("DiscountDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EditorName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("MemberID");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("MembershipID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmmount")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitsUsed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_MembershipMovement_MemberID");

                    b.HasIndex(new[] { "MembershipId" }, "IX_MembershipMovement_MembershipID");

                    b.ToTable("MembershipMovement");
                });

            modelBuilder.Entity("Entities.MembershipMovementOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<long>("MemberShipMovementId")
                        .HasColumnType("bigint")
                        .HasColumnName("MemberShipMovementID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberShipMovementId" }, "IX_MembershipMovementOrder_MemberShipMovementID");

                    b.ToTable("MembershipMovementOrder");
                });

            modelBuilder.Entity("Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MenuItem");
                });

            modelBuilder.Entity("Entities.Oprationsy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("ArabicOprationDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClassName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IconClass")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OprationDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OprationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ReferenceStatus")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Oprationsys");
                });

            modelBuilder.Entity("Entities.OrderInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FakeDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderInventory");
                });

            modelBuilder.Entity("Entities.OriginItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OriginItem");
                });

            modelBuilder.Entity("Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("FakeDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("MemberID");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmmount")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VendorId")
                        .HasColumnType("bigint")
                        .HasColumnName("VendorID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_Payment_MemberID");

                    b.HasIndex(new[] { "VendorId" }, "IX_Payment_VendorID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Entities.PurchaseInvoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AccountInvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FakeDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("InvoicePurchaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.Property<long>("VendorId")
                        .HasColumnType("bigint")
                        .HasColumnName("VendorID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "VendorId" }, "IX_PurchaseInvoice_VendorID");

                    b.ToTable("PurchaseInvoice");
                });

            modelBuilder.Entity("Entities.SalesInvoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("FakeDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("MemberID");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VendorId")
                        .HasColumnType("bigint")
                        .HasColumnName("VendorID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_SalesInvoice_MemberID");

                    b.HasIndex(new[] { "VendorId" }, "IX_SalesInvoice_VendorID");

                    b.ToTable("SalesInvoice");
                });

            modelBuilder.Entity("Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("ItemID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemId" }, "IX_Service_ItemID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Entities.StockMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryItemID");

                    b.Property<long?>("ItemsId")
                        .HasColumnType("bigint")
                        .HasColumnName("ItemsID");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("StocktakingInventoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("StocktakingInventoryID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InventoryItemId" }, "IX_StockMovement_InventoryItemID");

                    b.HasIndex(new[] { "ItemsId" }, "IX_StockMovement_ItemsID");

                    b.HasIndex(new[] { "StocktakingInventoryId" }, "IX_StockMovement_StocktakingInventoryID");

                    b.ToTable("StockMovement");
                });

            modelBuilder.Entity("Entities.StocktakingInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FakeDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StocktakingInventory");
                });

            modelBuilder.Entity("Entities.UnitItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UnitItem");
                });

            modelBuilder.Entity("Entities.UserRouter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Router")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRouter");
                });

            modelBuilder.Entity("Entities.Vendor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CreditLimit")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Fax")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber1")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "IX_Vendor_AccountID");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2890efde-5d28-406d-ae5e-72576f74870f",
                            ConcurrencyStamp = "f9fd5fb8-1ea9-4afd-8029-b8a027ee943f",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = "f4c8a1a5-0530-41a3-9ae1-99d51857de42",
                            ConcurrencyStamp = "4a1971c9-71fd-41d8-8cad-35176671d26a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "2c4f9fbb-cefc-4217-909d-dad1b6afd726",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b41b9a0f-f0df-4826-a8cf-0733c0c94f56",
                            Email = "tahashweiki.1994@Gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TAHASHWEIKI.1994@GMAIL.COM",
                            NormalizedUserName = "DEVELOPER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDlKsBqScI1exq/bzxvkvaDbqjeVK5MbABg6aA9S8KbO9QRBnSO79l9grdjvH9+gMg==",
                            PhoneNumber = "00962788675843",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "IZEQASXPA5Z6U7O2RPM32FSODDDDDIOW",
                            TwoFactorEnabled = false,
                            UserName = "Developer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "2c4f9fbb-cefc-4217-909d-dad1b6afd726",
                            RoleId = "2890efde-5d28-406d-ae5e-72576f74870f"
                        },
                        new
                        {
                            UserId = "2c4f9fbb-cefc-4217-909d-dad1b6afd726",
                            RoleId = "f4c8a1a5-0530-41a3-9ae1-99d51857de42"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.ActionLog", b =>
                {
                    b.HasOne("Entities.Oprationsy", "Opration")
                        .WithMany("ActionLogs")
                        .HasForeignKey("OprationId")
                        .HasConstraintName("FK_ActionLog_Oprationsys")
                        .IsRequired();

                    b.Navigation("Opration");
                });

            modelBuilder.Entity("Entities.Bank", b =>
                {
                    b.HasOne("Entities.Account", "Account")
                        .WithMany("Banks")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Bank_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entities.Cash", b =>
                {
                    b.HasOne("Entities.Account", "Account")
                        .WithMany("Cashes")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Cash_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entities.Cheque", b =>
                {
                    b.HasOne("Entities.Vendor", "Vendor")
                        .WithMany("Cheques")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Cheque_Vendor")
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Entities.EntryMovement", b =>
                {
                    b.HasOne("Entities.Account", "Account")
                        .WithMany("EntryMovements")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_EntryMovement_Account")
                        .IsRequired();

                    b.HasOne("Entities.EntryAccounting", "Entry")
                        .WithMany("EntryMovements")
                        .HasForeignKey("EntryId")
                        .HasConstraintName("FK_EntryMovement_EntryAccounting")
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Entities.InventoryMovement", b =>
                {
                    b.HasOne("Entities.InventoryItem", "InventoryItem")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("InventoryItemId")
                        .HasConstraintName("FK_InventoryMovement_InventoryItem")
                        .IsRequired();

                    b.HasOne("Entities.Item", "Items")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("ItemsId")
                        .HasConstraintName("FK_InventoryMovement_Item")
                        .IsRequired();

                    b.HasOne("Entities.OrderInventory", "OrderInventory")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("OrderInventoryId")
                        .HasConstraintName("FK_InventoryMovement_OrderInventory");

                    b.HasOne("Entities.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("PurchaseInvoiceId")
                        .HasConstraintName("FK_InventoryMovement_PurchaseInvoice");

                    b.HasOne("Entities.SalesInvoice", "SalesInvoice")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("SalesInvoiceId")
                        .HasConstraintName("FK_InventoryMovement_SalesInvoice");

                    b.Navigation("InventoryItem");

                    b.Navigation("Items");

                    b.Navigation("OrderInventory");

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("SalesInvoice");
                });

            modelBuilder.Entity("Entities.ItemMuo", b =>
                {
                    b.HasOne("Entities.Item", "Items")
                        .WithMany("ItemMuos")
                        .HasForeignKey("ItemsId")
                        .HasConstraintName("FK_ItemMUO_Item");

                    b.HasOne("Entities.MenuItem", "MenuItem")
                        .WithMany("ItemMuos")
                        .HasForeignKey("MenuItemId")
                        .HasConstraintName("FK_ItemMUO_MenuItem");

                    b.HasOne("Entities.OriginItem", "OriginItem")
                        .WithMany("ItemMuos")
                        .HasForeignKey("OriginItemId")
                        .HasConstraintName("FK_ItemMUO_OriginItem");

                    b.HasOne("Entities.UnitItem", "UnitItem")
                        .WithMany("ItemMuos")
                        .HasForeignKey("UnitItemId")
                        .HasConstraintName("FK_ItemMUO_UnitItem");

                    b.Navigation("Items");

                    b.Navigation("MenuItem");

                    b.Navigation("OriginItem");

                    b.Navigation("UnitItem");
                });

            modelBuilder.Entity("Entities.Member", b =>
                {
                    b.HasOne("Entities.Account", "Account")
                        .WithMany("Members")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Member_Account")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entities.MemberFace", b =>
                {
                    b.HasOne("Entities.Member", "Member")
                        .WithMany("MemberFaces")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberFace_Member")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Entities.MemberLog", b =>
                {
                    b.HasOne("Entities.Device", "Device")
                        .WithMany("MemberLogs")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("FK_MemberLog_Device")
                        .IsRequired();

                    b.HasOne("Entities.Member", "Member")
                        .WithMany("MemberLogs")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberLog_Member")
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Entities.MembershipMovement", b =>
                {
                    b.HasOne("Entities.Member", "Member")
                        .WithMany("MembershipMovements")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MembershipMovement_Member")
                        .IsRequired();

                    b.HasOne("Entities.Membership", "Membership")
                        .WithMany("MembershipMovements")
                        .HasForeignKey("MembershipId")
                        .HasConstraintName("FK_MembershipMovement_Membership")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Entities.MembershipMovementOrder", b =>
                {
                    b.HasOne("Entities.MembershipMovement", "MemberShipMovement")
                        .WithMany("MembershipMovementOrders")
                        .HasForeignKey("MemberShipMovementId")
                        .HasConstraintName("FK_MembershipMovementOrder_MembershipMovement")
                        .IsRequired();

                    b.Navigation("MemberShipMovement");
                });

            modelBuilder.Entity("Entities.Payment", b =>
                {
                    b.HasOne("Entities.Member", "Member")
                        .WithMany("Payments")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Payment_Member");

                    b.HasOne("Entities.Vendor", "Vendor")
                        .WithMany("Payments")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Payment_Vendor");

                    b.Navigation("Member");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Entities.PurchaseInvoice", b =>
                {
                    b.HasOne("Entities.Vendor", "Vendor")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_PurchaseInvoice_Vendor")
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Entities.SalesInvoice", b =>
                {
                    b.HasOne("Entities.Member", "Member")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_SalesInvoice_Member");

                    b.HasOne("Entities.Vendor", "Vendor")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_SalesInvoice_Vendor");

                    b.Navigation("Member");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Entities.Service", b =>
                {
                    b.HasOne("Entities.Item", "Item")
                        .WithMany("Services")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Service_Item")
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Entities.StockMovement", b =>
                {
                    b.HasOne("Entities.InventoryItem", "InventoryItem")
                        .WithMany("StockMovements")
                        .HasForeignKey("InventoryItemId")
                        .HasConstraintName("FK_StockMovement_InventoryItem")
                        .IsRequired();

                    b.HasOne("Entities.Item", "Items")
                        .WithMany("StockMovements")
                        .HasForeignKey("ItemsId")
                        .HasConstraintName("FK_StockMovement_Item");

                    b.HasOne("Entities.StocktakingInventory", "StocktakingInventory")
                        .WithMany("StockMovements")
                        .HasForeignKey("StocktakingInventoryId")
                        .HasConstraintName("FK_StockMovement_StocktakingInventory")
                        .IsRequired();

                    b.Navigation("InventoryItem");

                    b.Navigation("Items");

                    b.Navigation("StocktakingInventory");
                });

            modelBuilder.Entity("Entities.Vendor", b =>
                {
                    b.HasOne("Entities.Account", "Account")
                        .WithMany("Vendors")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Vendor_Account")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Account", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("Cashes");

                    b.Navigation("EntryMovements");

                    b.Navigation("Members");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Entities.Device", b =>
                {
                    b.Navigation("MemberLogs");
                });

            modelBuilder.Entity("Entities.EntryAccounting", b =>
                {
                    b.Navigation("EntryMovements");
                });

            modelBuilder.Entity("Entities.InventoryItem", b =>
                {
                    b.Navigation("InventoryMovements");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("Entities.Item", b =>
                {
                    b.Navigation("InventoryMovements");

                    b.Navigation("ItemMuos");

                    b.Navigation("Services");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("Entities.Member", b =>
                {
                    b.Navigation("MemberFaces");

                    b.Navigation("MemberLogs");

                    b.Navigation("MembershipMovements");

                    b.Navigation("Payments");

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("Entities.Membership", b =>
                {
                    b.Navigation("MembershipMovements");
                });

            modelBuilder.Entity("Entities.MembershipMovement", b =>
                {
                    b.Navigation("MembershipMovementOrders");
                });

            modelBuilder.Entity("Entities.MenuItem", b =>
                {
                    b.Navigation("ItemMuos");
                });

            modelBuilder.Entity("Entities.Oprationsy", b =>
                {
                    b.Navigation("ActionLogs");
                });

            modelBuilder.Entity("Entities.OrderInventory", b =>
                {
                    b.Navigation("InventoryMovements");
                });

            modelBuilder.Entity("Entities.OriginItem", b =>
                {
                    b.Navigation("ItemMuos");
                });

            modelBuilder.Entity("Entities.PurchaseInvoice", b =>
                {
                    b.Navigation("InventoryMovements");
                });

            modelBuilder.Entity("Entities.SalesInvoice", b =>
                {
                    b.Navigation("InventoryMovements");
                });

            modelBuilder.Entity("Entities.StocktakingInventory", b =>
                {
                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("Entities.UnitItem", b =>
                {
                    b.Navigation("ItemMuos");
                });

            modelBuilder.Entity("Entities.Vendor", b =>
                {
                    b.Navigation("Cheques");

                    b.Navigation("Payments");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SalesInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
