using System.Runtime.InteropServices;
using System.Text.Json;
using System.Windows;
using WacomClientService.Models;
using WpfScreenHelper;

namespace WacomClientService.Service
{
    public class MouseServices
    {
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool SetCursorPos(int x, int y);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetCursorPos(out POINT lpPoint);
        // Define the CURSORINFO structure
        [StructLayout(LayoutKind.Sequential)]
        public struct CURSORINFO
        {
            public int cbSize;
            public int flags;
            public IntPtr hCursor;
            public POINT ptScreenPos;
        }

        // Define the POINT structure
        [StructLayout(LayoutKind.Sequential)]
        public struct POINT
        {
            public int X;
            public int Y;
        }

        #region Form Mouse Events

        public static POINT GetCursorPos()
        {
            POINT cursorPosition;
            bool success = GetCursorPos(out cursorPosition);
            if (success)
            {
                int x = cursorPosition.X;
                int y = cursorPosition.Y;

                // Do something with the cursor coordinates (x, y)
            }
            return cursorPosition;
        }
        public static void MoveMouseToCenterPointPosition()
        {
            Screen primaryScreen = Screen.PrimaryScreen;

            // Calculate the center point based on the screen's dimensions
            double centerX = primaryScreen.WpfBounds.Left + (primaryScreen.WpfBounds.Width / 2.0);
            double centerY = primaryScreen.WpfBounds.Top + (primaryScreen.WpfBounds.Height / 2.0);
            // Get the primary screen's dimensions
            double screenWidth = primaryScreen.WpfBounds.Width;
            double screenHeight = primaryScreen.WpfBounds.Height;

            // Ensure the coordinates are within the screen boundaries
            centerX = Math.Min(Math.Max(0, centerX), screenWidth - 1);
            centerY = Math.Min(Math.Max(0, centerY), screenHeight - 1);

            // Move the mouse cursor to the specified position
            SetCursorPos((int)centerX, (int)centerY);
        }
        public static Screen GetPrimaryScreenAtPoint(Point wpfPoint)
        {
            // Get all screens
            var screens = Screen.AllScreens;

            // Loop through each screen and check if the point is within its bounds
            foreach (var screen in screens)
            {
                if (screen.Bounds.Contains(wpfPoint.X, wpfPoint.Y))
                {
                    // Return the primary screen if the point is within the screen's bounds
                    if (screen.Primary)
                    {
                        return screen;
                    }
                }
            }

            return null;
        }

        public static void Application_MouseMove(object sender, System.Windows.Input.MouseEventArgs e)
        {
            bool isPen = !(e.StylusDevice is null || e.StylusDevice.ToString().Trim() == "");
            if (isPen) return;

            POINT mousePosition = GetCursorPos();

            Screen screen = GetPrimaryScreenAtPoint(new Point { X = mousePosition.X, Y = mousePosition.Y });
            if (screen == null) // The event was generated by a mouse //  primary screen
            {
                MoveMouseToCenterPointPosition();
            }

        }

        public static void WebView_MouseMove(string pointer)
        {
            PointerMoveEvent pointerMoveEvent = JsonSerializer.Deserialize<PointerMoveEvent>(pointer);

            if (pointerMoveEvent.pointerType.Contains("mouse"))
            {
                POINT mousePosition = GetCursorPos();

                Screen screen = GetPrimaryScreenAtPoint(new Point { X = mousePosition.X, Y = mousePosition.Y });


                if (screen == null) // The event was generated by a mouse //  primary screen
                {
                    MoveMouseToCenterPointPosition();
                }
            }

        }
        #endregion
    }
}
